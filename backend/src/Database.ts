//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { messagesEntity } from './db/messages.entity';
import { shortFilmsEntity } from './db/shortFilms.entity';
import { chatGroupsEntity } from './db/chatGroups.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      messagesEntity,
      shortFilmsEntity,
      chatGroupsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        { secretPasscode: 'secretPasscode 1', id: 41 },
        { secretPasscode: 'secretPasscode 2', id: 75 },
        { secretPasscode: 'secretPasscode 3', id: 20 },
        { secretPasscode: 'secretPasscode 4', id: 8 },
        { secretPasscode: 'secretPasscode 5', id: 20 },
      ],
      messages: [
        {
          senderId: 1,
          messageContent: 'messageContent 1',
          timestamp: '2023-12-25T23:31:35.140Z',
          recipientId: 1,
          id: 62,
        },
        {
          senderId: 2,
          messageContent: 'messageContent 2',
          timestamp: '2024-10-16T22:18:32.657Z',
          recipientId: 2,
          id: 95,
        },
        {
          senderId: 3,
          messageContent: 'messageContent 3',
          timestamp: '2025-01-05T07:27:54.313Z',
          recipientId: 3,
          id: 35,
        },
        {
          senderId: 4,
          messageContent: 'messageContent 4',
          timestamp: '2023-05-16T08:26:40.971Z',
          recipientId: 4,
          id: 4,
        },
        {
          senderId: 5,
          messageContent: 'messageContent 5',
          timestamp: '2023-10-27T04:19:31.634Z',
          recipientId: 5,
          id: 49,
        },
      ],
      shortFilms: [
        {
          title: 'title 1',
          description: 'description 1',
          uploadDate: '2024-10-16T13:02:37.609Z',
          uploaderId: 1,
          linkToFilm: 'linkToFilm 1',
          id: 67,
        },
        {
          title: 'title 2',
          description: 'description 2',
          uploadDate: '2023-11-04T08:51:54.812Z',
          uploaderId: 2,
          linkToFilm: 'linkToFilm 2',
          id: 9,
        },
        {
          title: 'title 3',
          description: 'description 3',
          uploadDate: '2024-09-25T09:09:33.254Z',
          uploaderId: 3,
          linkToFilm: 'linkToFilm 3',
          id: 34,
        },
        {
          title: 'title 4',
          description: 'description 4',
          uploadDate: '2023-11-02T14:18:49.879Z',
          uploaderId: 4,
          linkToFilm: 'linkToFilm 4',
          id: 29,
        },
        {
          title: 'title 5',
          description: 'description 5',
          uploadDate: '2024-11-07T06:16:48.965Z',
          uploaderId: 5,
          linkToFilm: 'linkToFilm 5',
          id: 49,
        },
      ],
      chatGroups: [
        {
          groupName: 'groupName 1',
          groupDescription: 'groupDescription 1',
          creationDate: '2024-12-18T01:19:07.462Z',
          listOfMemberIds: 1,
          id: 11,
        },
        {
          groupName: 'groupName 2',
          groupDescription: 'groupDescription 2',
          creationDate: '2024-04-25T21:15:09.728Z',
          listOfMemberIds: 2,
          id: 99,
        },
        {
          groupName: 'groupName 3',
          groupDescription: 'groupDescription 3',
          creationDate: '2024-07-27T21:56:15.378Z',
          listOfMemberIds: 3,
          id: 35,
        },
        {
          groupName: 'groupName 4',
          groupDescription: 'groupDescription 4',
          creationDate: '2024-12-01T03:13:47.419Z',
          listOfMemberIds: 4,
          id: 57,
        },
        {
          groupName: 'groupName 5',
          groupDescription: 'groupDescription 5',
          creationDate: '2024-03-14T19:39:07.509Z',
          listOfMemberIds: 5,
          id: 59,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('messagesEntity', data.messages);
      await this.SeedResource('shortFilmsEntity', data.shortFilms);
      await this.SeedResource('chatGroupsEntity', data.chatGroups);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
